{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "q",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#integers"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#types"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.q",
					"begin": "//",
					"end": "$"
				},
				{
					"name": "comment.line.shebang.q",
					"begin": "#!",
					"end": "$"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"match": "\\b([a-zA-Z0-9_]+)\\s*\\(",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "\\b([a-zA-Z0-9_]+)\\.([a-zA-Z0-9_]+)\\b",
					"captures": {
						"1": {
							"name": "entity.name.package.q"
						},
						"2": {
							"name": "entity.name.function.q"
						}
					}
				}
			]
		},
		"integers": {
			"name": "constant.numeric.integer.q",
			"match": "\\b([0-9]+|0b[01]+|0o[0-7]+|0x[0-9A-F]+)\\b"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.q",
					"match": "\\b(assert|else|for|if|for|loop|switch|return)\\b"
				},
				{
					"name": "keyword.toplevel.q",
					"match": "\\b(const|extern|import)\\b"
				}

			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.q",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.q",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.q",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.q",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.any.q",
					"match": "\\bany\\b"
				},
				{
					"name": "storage.type.boolean.q",
					"match": "\\bbool\\b"
				},
				{
					"name": "storage.type.byte.q",
					"match": "\\bbyte\\b"
				},
				{
					"name": "storage.type.numeric.q",
					"match": "\\b(u?int(8|16|32|64)?|float(32|64)?)\\b"
				},
				{
					"name": "storage.type.string.q",
					"match": "\\bstring\\b"
				}
			]
		}
	},
	"scopeName": "source.q"
}